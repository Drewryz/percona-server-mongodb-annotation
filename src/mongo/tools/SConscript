# -*- mode: python; -*-

Import('env')
Import('get_option')

env = env.Clone()

yamlEnv = env.Clone()
yamlEnv.InjectThirdParty(libraries=['yaml'])

mongobridge = env.Program(
    target="mongobridge",
    source=[
        "bridge.cpp",
        "bridge_commands.cpp",
        "mongobridge_options.cpp",
        env.Idlc("mongobridge_options.idl")[0],
        "mongobridge_options_init.cpp"
    ],
    LIBDEPS=[
        '$BUILD_DIR/mongo/db/dbmessage',
        '$BUILD_DIR/mongo/rpc/rpc',
        '$BUILD_DIR/mongo/transport/message_compressor',
        '$BUILD_DIR/mongo/transport/message_compressor_options_server',
        '$BUILD_DIR/mongo/transport/service_entry_point',
        '$BUILD_DIR/mongo/transport/service_executor',
        '$BUILD_DIR/mongo/transport/transport_layer',
        '$BUILD_DIR/mongo/util/net/network',
        '$BUILD_DIR/mongo/util/options_parser/options_parser_init',
        '$BUILD_DIR/mongo/util/signal_handlers',
    ],
    AIB_COMPONENT='tools',
)

mongoebench = yamlEnv.Program(
    target='mongoebench',
    source=[
        'mongoebench_main.cpp',
        'mongoebench_options.cpp',
        'mongoebench_options_init.cpp',
        env.Idlc('mongoebench_options.idl')[0],
    ],
    LIBDEPS=[
        '$BUILD_DIR/mongo/db/dbdirectclient',
        '$BUILD_DIR/mongo/db/storage/storage_options',
        '$BUILD_DIR/mongo/db/storage/wiredtiger/storage_wiredtiger' if get_option('wiredtiger') == 'on' else [],
        '$BUILD_DIR/mongo/embedded/embedded',
        '$BUILD_DIR/mongo/embedded/embedded_integration_helpers',
        '$BUILD_DIR/mongo/shell/benchrun',
        '$BUILD_DIR/mongo/util/signal_handlers',
    ],
    AIB_COMPONENT="embedded-test",
    AIB_COMPONENTS_EXTRA=[
        "tests",
        "benchmarks",
    ],
)

perconadecrypt = env.Program(
    target='perconadecrypt',
    source=[
        'perconadecrypt.cpp',
        'perconadecrypt_options.cpp',
        env.Idlc("perconadecrypt_options.idl")[0],
        'perconadecrypt_options_init.cpp'
    ],
    LIBDEPS=[
        '$BUILD_DIR/mongo/db/encryption/encryption_options',
        '$BUILD_DIR/mongo/db/encryption/encryption_vault',
        '$BUILD_DIR/mongo/util/options_parser/options_parser_init',
    ],
)


hygienic = get_option('install-mode') == 'hygienic'
if not hygienic:
    env.Install("#/", mongobridge)
    env.Install("#/", mongoebench)
    env.Install("#/", perconadecrypt)

env.Alias('all', mongoebench)  # This ensures it compiles and links, but doesn't copy it anywhere.
